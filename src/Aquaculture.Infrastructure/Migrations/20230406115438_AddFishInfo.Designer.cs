// <auto-generated />
using System;
using Aquaculture.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aquaculture.Infrastructure.Migrations
{
    [DbContext(typeof(AquacultureDbContext))]
    [Migration("20230406115438_AddFishInfo")]
    partial class AddFishInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aquaculture.Domain.FishInfoAggregate.FishInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AvgWeight")
                        .HasColumnType("real");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FishInfomations", (string)null);
                });

            modelBuilder.Entity("Aquaculture.Domain.FishTankAggregate.FishTank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WaterMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FishTanks", (string)null);
                });

            modelBuilder.Entity("Aquaculture.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Aquaculture.Domain.WaterMeasurementAggreate.WaterMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FishTankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WaterMeasurements", (string)null);
                });

            modelBuilder.Entity("Aquaculture.Domain.FishInfoAggregate.FishInfo", b =>
                {
                    b.OwnsOne("Aquaculture.Domain.FishInfoAggregate.Entities.FishType", "FishType", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("FishTypeId");

                            b1.Property<Guid>("FishInfoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "FishInfoId");

                            b1.HasIndex("FishInfoId")
                                .IsUnique();

                            b1.ToTable("FishTypes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("FishInfoId");

                            b1.OwnsOne("Aquaculture.Domain.WaterMeasurementAggreate.ValueObjects.WaterParams", "ComfortParams", b2 =>
                                {
                                    b2.Property<Guid>("FishTypeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("FishTypeFishInfoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Acidity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Alkalinity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Ammonia")
                                        .HasColumnType("real");

                                    b2.Property<float>("CarbonDioxide")
                                        .HasColumnType("real");

                                    b2.Property<float>("DissolvedOxygen")
                                        .HasColumnType("real");

                                    b2.Property<float>("Temperature")
                                        .HasColumnType("real");

                                    b2.HasKey("FishTypeId", "FishTypeFishInfoId");

                                    b2.ToTable("FishTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("FishTypeId", "FishTypeFishInfoId");
                                });

                            b1.OwnsOne("Aquaculture.Domain.WaterMeasurementAggreate.ValueObjects.WaterParams", "CriticalParams", b2 =>
                                {
                                    b2.Property<Guid>("FishTypeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("FishTypeFishInfoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Acidity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Alkalinity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Ammonia")
                                        .HasColumnType("real");

                                    b2.Property<float>("CarbonDioxide")
                                        .HasColumnType("real");

                                    b2.Property<float>("DissolvedOxygen")
                                        .HasColumnType("real");

                                    b2.Property<float>("Temperature")
                                        .HasColumnType("real");

                                    b2.HasKey("FishTypeId", "FishTypeFishInfoId");

                                    b2.ToTable("FishTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("FishTypeId", "FishTypeFishInfoId");
                                });

                            b1.OwnsOne("Aquaculture.Domain.WaterMeasurementAggreate.ValueObjects.WaterParams", "TolerantParams", b2 =>
                                {
                                    b2.Property<Guid>("FishTypeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("FishTypeFishInfoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Acidity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Alkalinity")
                                        .HasColumnType("real");

                                    b2.Property<float>("Ammonia")
                                        .HasColumnType("real");

                                    b2.Property<float>("CarbonDioxide")
                                        .HasColumnType("real");

                                    b2.Property<float>("DissolvedOxygen")
                                        .HasColumnType("real");

                                    b2.Property<float>("Temperature")
                                        .HasColumnType("real");

                                    b2.HasKey("FishTypeId", "FishTypeFishInfoId");

                                    b2.ToTable("FishTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("FishTypeId", "FishTypeFishInfoId");
                                });

                            b1.Navigation("ComfortParams")
                                .IsRequired();

                            b1.Navigation("CriticalParams")
                                .IsRequired();

                            b1.Navigation("TolerantParams")
                                .IsRequired();
                        });

                    b.Navigation("FishType")
                        .IsRequired();
                });

            modelBuilder.Entity("Aquaculture.Domain.WaterMeasurementAggreate.WaterMeasurement", b =>
                {
                    b.OwnsOne("Aquaculture.Domain.WaterMeasurementAggreate.ValueObjects.WaterParams", "WaterParams", b1 =>
                        {
                            b1.Property<Guid>("WaterMeasurementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("Acidity")
                                .HasColumnType("real");

                            b1.Property<float>("Alkalinity")
                                .HasColumnType("real");

                            b1.Property<float>("Ammonia")
                                .HasColumnType("real");

                            b1.Property<float>("CarbonDioxide")
                                .HasColumnType("real");

                            b1.Property<float>("DissolvedOxygen")
                                .HasColumnType("real");

                            b1.Property<float>("Temperature")
                                .HasColumnType("real");

                            b1.HasKey("WaterMeasurementId");

                            b1.ToTable("WaterMeasurements");

                            b1.WithOwner()
                                .HasForeignKey("WaterMeasurementId");
                        });

                    b.Navigation("WaterParams")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
